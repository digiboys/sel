load("@buildifier_prebuilt//:rules.bzl", "buildifier")
load("@hedron_compile_commands//:refresh_compile_commands.bzl", "refresh_compile_commands")
load("@rules_multirun//:defs.bzl", "multirun")
load("@rules_shell//shell:sh_binary.bzl", "sh_binary")

alias(
    name = "clang_toolchain",
    actual = select({
        "@platforms//os:macos": "@llvm_toolchain//:cc-toolchain-aarch64-darwin",
        "@platforms//os:linux": "@llvm_toolchain//:cc-toolchain-x86_64-linux",
    }),
)

buildifier(
    name = "buildifier.check",
    lint_mode = "warn",
    mode = "check",
)

buildifier(
    name = "buildifier",
    lint_mode = "warn",
    mode = "fix",
)

genrule(
    name = "gen-clang-format",
    outs = ["clang-format.bash"],
    cmd = """
echo "#!/bin/bash" > $@
echo "cd \\$$BUILD_WORKSPACE_DIRECTORY" >> $@
echo "exec bazelisk build \\$$@ //..." >> $@
""",
)

sh_binary(
    name = "clang-format.check",
    srcs = ["clang-format.bash"],
    args = [
        "--aspects=@bazel_clang_format//:defs.bzl%check_aspect",
        "--output_groups=report",
        "--keep_going",
    ],
)

sh_binary(
    name = "clang-format",
    srcs = ["clang-format.bash"],
    args = [
        "--aspects=@bazel_clang_format//:defs.bzl%fix_aspect",
        "--output_groups=report",
        "--keep_going",
        "--use_action_cache=false",
    ],
)

multirun(
    name = "format.check",
    commands = [
        ":buildifier.check",
        ":clang-format.check",
    ],
)

multirun(
    name = "format",
    commands = [
        ":buildifier",
        ":clang-format",
    ],
)

genrule(
    name = "gen-clang-tidy",
    outs = ["clang-tidy.bash"],
    cmd = """
echo "#!/bin/bash" > $@
echo "cd \\$$BUILD_WORKSPACE_DIRECTORY" >> $@
echo "exec bazelisk build {options} \\$${{@:-//...}}" >> $@
""".format(
        options = " ".join([
            "--aspects=@rules_clang_tidy//:aspects.bzl%check",
            "--output_groups=report",
            "--keep_going",
            "--verbose_failures",
        ]),
    ),
)

# lint all targets with default options
#  bazel run //tools:lint
#
# lint with a single check on a single target
#   bazel run //tools:lint -- \
#     --@rules_clang_tidy//:extra-options=--checks='-*,clang-analyzer-core.uninitialized.Assign' \
#     //test:point_test
#
sh_binary(
    name = "clang-tidy",
    srcs = ["clang-tidy.bash"],
)

alias(
    name = "lint",
    actual = ":clang-tidy",
)

refresh_compile_commands(
    name = "compile_commands",
    targets = {
        "//sel/...": "--extra_toolchains=//tools:clang_toolchain",
    },
)

genrule(
    name = "gen-coverage",
    srcs = ["@lcov//:genhtml"],
    outs = ["coverage.bash"],
    cmd = """
echo "#!/bin/bash" > $@
echo "set -euo pipefail" >> $@
echo "" >> $@
echo "cd \\$$BUILD_WORKSPACE_DIRECTORY" >> $@
echo "COVERAGE_DIR={cov_dir}" >> $@
echo "bazelisk coverage \\$${{@:-//...}}" >> $@
echo "$(execpath @lcov//:genhtml) {options} {report}" >> $@
echo "" >> $@
echo "echo wrote coverage report to" >> $@
echo "echo file://{html}" >> $@
""".format(
        cov_dir = "\\$$(bazelisk info output_path)/_coverage",
        html = "\\$${COVERAGE_DIR}/html/index.html",
        options = " ".join([
            "--output-directory \\$${COVERAGE_DIR}/html",
            "--show-details",
            "--function-coverage",
            "--branch-coverage",
            "--title zipline",
            "--highlight",
            "--legend",
            "--missed",
            "--demangle-cpp",
            "--dark-mode",
        ]),
        report = "\\$${COVERAGE_DIR}/_coverage_report.dat",
    ),
)

sh_binary(
    name = "coverage",
    srcs = [":coverage.bash"],
    args = [
        "--instrumentation_filter=//sel",
        "//...",
    ],
    data = ["@lcov//:genhtml"],
)

_coverage_open_script = """
echo "#!/bin/bash" > $@
echo "set -euo pipefail" >> $@
echo "" >> $@
echo "cd \\$$BUILD_WORKSPACE_DIRECTORY" >> $@
#echo "bazelisk run //tools:coverage" >> $@
echo "exec {{cmd}} {html}" >> $@
""".format(
    html = "\\$$(bazelisk info output_path)/_coverage/html/index.html",
)

# due to sh_binary tokenization, we can't use a generic open command and pass
# the path as an argument
# https://github.com/bazelbuild/bazel/issues/12313
genrule(
    name = "coverage.open",
    outs = ["coverage.open.bash"],
    cmd = select({
        "@platforms//os:macos": _coverage_open_script.format(cmd = "open"),
        "@platforms//os:linux": _coverage_open_script.format(cmd = "xdg-open"),
    }),
    executable = True,
)
