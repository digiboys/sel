name: check

on:
  push:
    branches: [main]
  pull_request:
    branches: ["*"]
    types: [synchronize, opened, reopened, edited]
  workflow_dispatch:

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        compilation_mode:
          - 'fastbuild'
          - 'opt'
        toolchain:
          - 'clang'
        os:
          - 'ubuntu-latest'
          - 'macos-latest'
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/ci-env-setup
      with:
        buildbuddy-api-key: ${{ secrets.BUILDBUDDY_API_KEY }}
    - run: |
        bazel test \
          --compilation_mode=${{ matrix.compilation_mode }} \
          --extra_toolchains=//tools:${{ matrix.toolchain }}_toolchain \
          //...

  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/ci-env-setup
      with:
        buildbuddy-api-key: ${{ secrets.BUILDBUDDY_API_KEY }}
    - run: |
        bazel run //tools:format.check

  clang-tidy-targets:
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.query.outputs.targets}}
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/ci-env-setup
      with:
        buildbuddy-api-key: ${{ secrets.BUILDBUDDY_API_KEY }}
        external-cache-key: ${{ runner.os }}-local-config-cc
    - id: query
      run: |
        targets=$(\
          bazel cquery \
            --config=local-config-cc \
            --output starlark \
            --starlark:expr='repr(target).split(" ")[-1].removesuffix(">") if "CcInfo" in providers(target).keys() and not repr(target).startswith("<alias") else ""' \
            -- \
            //... | xargs)

        echo "targets=[\"${targets// /\",\"}\"]" >> $GITHUB_OUTPUT

  lint:
    runs-on: ubuntu-latest
    needs:
      - clang-tidy-targets
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.clang-tidy-targets.outputs.targets) }}
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/ci-env-setup
      with:
        buildbuddy-api-key: ${{ secrets.BUILDBUDDY_API_KEY }}
    - run: |
        bazel run //tools:clang-tidy -- ${{ matrix.target }}

  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/ci-env-setup
      with:
        buildbuddy-api-key: ${{ secrets.BUILDBUDDY_API_KEY }}
    - run: |
        bazel run //tools:coverage
    - uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./bazel-out/_coverage/_coverage_report.dat
        fail_ci_if_error: true

  # https://emmer.dev/blog/skippable-github-status-checks-aren-t-really-required/
  # https://github.com/marketplace/actions/alls-green
  all:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - test
      - format
      - lint
      - coverage
    steps:
    - uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
