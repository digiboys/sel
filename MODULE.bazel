bazel_dep(name = "rules_cc", version = "0.1.1")

bazel_dep(
    name = "toolchains_llvm",
    dev_dependency = True,
)
bazel_dep(
    name = "bazel_clang_format",
    version = "0.0.0",
    dev_dependency = True,
)
bazel_dep(
    name = "rules_clang_tidy",
    version = "0.0.0",
    dev_dependency = True,
)
bazel_dep(
    name = "hedron_compile_commands",
    dev_dependency = True,
)
bazel_dep(
    name = "platforms",
    version = "1.0.0",
    dev_dependency = True,
)
bazel_dep(
    name = "buildifier_prebuilt",
    version = "8.2.0.2",
    dev_dependency = True,
)
bazel_dep(
    name = "rules_multirun",
    version = "0.12.0",
    dev_dependency = True,
)
bazel_dep(
    name = "rules_shell",
    version = "0.4.1",
    dev_dependency = True,
)
bazel_dep(
    name = "bazel_skylib",
    version = "1.7.1",
    dev_dependency = True,
)
bazel_dep(
    name = "skytest",
    version = "0.0.0",
    dev_dependency = True,
)

TOOLCHAINS_LLVM_COMMIT = "f1048a300d0be607c7f5092e323bc15b7ef8d8af"

archive_override(
    module_name = "toolchains_llvm",
    integrity = "sha256-g9hKi+nAtM1ddbK9Ppkrx8LyY7K/Op3vSwopp2Kh85Y=",
    strip_prefix = "toolchains_llvm-{commit}".format(
        commit = TOOLCHAINS_LLVM_COMMIT,
    ),
    urls = ["https://github.com/bazel-contrib/toolchains_llvm/archive/{commit}.tar.gz".format(
        commit = TOOLCHAINS_LLVM_COMMIT,
    )],
)

CXX_STANDARD = ["-std=c++26"]

COMMON_CXX_WARNINGS = [
    "-Werror",
    "-Wall",
    "-Wextra",
    "-Wpedantic",
    "-Wconversion",
    "-Wnon-virtual-dtor",
    "-Wold-style-cast",
    "-Wcast-align",
    "-Wunused",
    "-Woverloaded-virtual",
    "-Wmisleading-indentation",
    "-Wnull-dereference",
    "-Wdouble-promotion",
    "-Wformat=2",
    "-Wimplicit-fallthrough",
    "-Wdocumentation-unknown-command",
    "-Wextra-semi",
    "-Wunreachable-code",
    "-Wunreachable-code-return",
]

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm", dev_dependency = True)
llvm.toolchain(
    cxx_flags = {
        "": [
            "-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE",
            "-stdlib=libc++",
            "-Wshadow",
        ] + COMMON_CXX_WARNINGS + CXX_STANDARD,
    },
    llvm_version = "20.1.4",
)
use_repo(llvm, "llvm_toolchain")

register_toolchains("@llvm_toolchain//:all")

HEDRON_COMPILE_COMMANDS_COMMIT = "4f28899228fb3ad0126897876f147ca15026151e"

archive_override(
    module_name = "hedron_compile_commands",
    integrity = "sha256-ZYEiz7HyW+duohKwD16wR9jirci8+SO5GEYfKx43zfI=",
    strip_prefix = "bazel-compile-commands-extractor-{commit}".format(
        commit = HEDRON_COMPILE_COMMANDS_COMMIT,
    ),
    urls = ["https://github.com/hedronvision/bazel-compile-commands-extractor/archive/{commit}.tar.gz".format(
        commit = HEDRON_COMPILE_COMMANDS_COMMIT,
    )],
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "lcov",
    build_file_content = """\
load("@bazel_skylib//rules:native_binary.bzl", "native_binary")

native_binary(
    name = "genhtml",
    src = "bin/genhtml",
    visibility = ["//visibility:public"],
)
    """,
    integrity = "sha256-mHAxrVUoyKdG1LUrOAvBv/5BLeHyucK6UiSZVmjjJAs=",
    strip_prefix = "lcov-1.16",
    url = "https://github.com/linux-test-project/lcov/releases/download/v1.16/lcov-1.16.tar.gz",
)
